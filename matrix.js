//bfs - we know that if an element has INF as a neighbor then it used the shortest path or at least equal to shortest path since we are
// using a queue 

// things to think about - best way to loop through neighbors, best way to create 2d matrix?

//best way to loop thru neighbors? not sure which i like better
/*
let directions = [[-1,0], [1,0], [0,-1], [0,1]];
    while(q.size) {
        let [r, c] = q.popLeft().value;
        for(let [dr, dc] of directions) {
            let nr = r + dr
            let nc = c + dc;
            if(nr>=0 && nr < ROW && nc>=0 && nc<COL && mat[nr][nc] === INF) {
                mat[nr][nc] = mat[r][c] + 1;
                q.pushRight([nr,nc]);
            }
        }
    }
*/

var updateMatrix = function(mat) {

    const ROW = mat.length;
    const COL = mat[0].length;
    const INF = Infinity;

    let q = [];
    for(let i=0; i<ROW; i++) {
        for(let j=0; j<COL; j++) {
            if(mat[i][j] === 0) {
                q.push([i,j]);
            } else {
                mat[i][j] = INF;
            }
        }
    }
    function getNeighbors(r, c) {
        return [[r+1, c], [r-1, c], [r,c+1], [r,c-1]];
    }
    while(q.length) {
        let [r, c] = q.shift();
        let n =getNeighbors(r,c);
        for(let i=0; i<n.length;i++) {
            let [a,b] = n[i];
            if(a>=0 && a < ROW && b>=0 && b<COL && mat[a][b] === INF) {
                mat[a][b] = mat[r][c] + 1;
                q.push([a,b]);
            }
        }
    }
    return mat;
};





// dfs is too slow... my computer cant even do it

var updateMatrix = function(mat) {
    const ROW = mat.length;
    const COL = mat[0].length;
    const INF = Infinity;

    let visited = {};

    let dfs = (row, col) => {
        // console.log('row', row);
        // console.log('col', col);
        // console.log('visited', visited);
        if(row < 0 || col<0 || row >= ROW || col >= COL || visited[`${row}_${col}`]) {
            return INF;
        }
        if(mat[row][col] === 0) {
            return 0;
        }
        visited[`${row}_${col}`] = 1;
        let res = 0;
        let a = dfs(row+1, col);
        if(a!==0) {
            let b = dfs(row-1, col);
            if(b!==0) {
                let c = dfs(row, col+1);
                if(c!==0) {
                    let d = dfs(row, col-1);
                    res = res + Math.min(a, b, c, d);
                }
            }
        }
        res++;
       
        visited[`${row}_${col}`] = 0;
        return res;
    }
    let res = [];
    for(let i =0; i<ROW; i++) {
        let row = [];
        for(let j=0; j<COL; j++) {
            row.push(dfs(i,j));
        }
        res.push(row);
    }
    return res;
};

// let mat = [[1,1,0,0,1,0,0,1,1,0],[1,0,0,1,0,1,1,1,1,1],[1,1,1,0,0,1,1,1,1,0],[0,1,1,1,0,1,1,1,1,1],[0,0,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,0,1,1,1],[0,1,1,1,1,1,1,0,0,1],[1,1,1,1,1,0,0,1,1,1],[0,1,0,1,1,0,1,1,1,1],[1,1,1,0,1,0,1,1,1,1]];
let mat = [[0,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,0],[1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,1,1],[1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0],[1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1],[1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1],[1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1],[1,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1],[1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1],[0,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],[1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0],[1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1],[1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1],[1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1],[1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1],[0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0],[1,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1],[1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1],[1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1],[1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1],[0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1],[0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0],[0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1],[1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0],[0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1],[1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1],[1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,1]];
let res = updateMatrix(mat);
console.log('res', res);